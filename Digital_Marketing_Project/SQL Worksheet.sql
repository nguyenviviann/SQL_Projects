-- Bridge to import raw data and prep it for transformation and insertion into final relational tables
CREATE TABLE cvs_staging (
    customerID NUMBER,
    age NUMBER,
    gender VARCHAR2(10),
    income NUMBER,
    campaignChannel VARCHAR2(25),
    campaignType VARCHAR2(25),
    adSpend NUMBER(10, 2),
    clickThroughRate NUMBER(7, 4),
    conversionRate NUMBER(7, 4),
    websiteVisits NUMBER,
    pagesPerVisit NUMBER(5, 2),
    timeOnSite NUMBER(5, 2),
    socialShares NUMBER,
    emailOpens NUMBER,
    emailClicks NUMBER,
    previousPurchases NUMBER,
    loyaltyPoints NUMBER,
    conversion NUMBER(1) -- Only binary 0 or 1 allowed
);

CREATE TABLE customers (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    age NUMBER NOT NULL,
    gender VARCHAR2(10) NOT NULL,
    income NUMBER NOT NULL,
    CONSTRAINT check_gender_input CHECK(gender IN ('Male', 'Female'))
);

CREATE TABLE campaigns (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    channel VARCHAR2(25) NOT NULL,
    type VARCHAR2(25) NOT NULL,
    adSpend NUMBER(10, 2) NOT NULL,
    clickThroughRate NUMBER(7, 4) NOT NULL,
    conversionRate NUMBER(7, 4) NOT NULL
);

CREATE TABLE engagement (
    customerID NUMBER NOT NULL,
    campaignID NUMBER NOT NULL,
    websiteVisits NUMBER NOT NULL,
    pagesPerVisit NUMBER(5, 2) NOT NULL,
    timeOnSite NUMBER(5, 2) NOT NULL,
    socialShares NUMBER NOT NULL,
    emailOpens NUMBER NOT NULL,
    emailClicks NUMBER NOT NULL,
    PRIMARY KEY(customerID, campaignID),
    FOREIGN KEY(customerID) REFERENCES customers(id),
    FOREIGN KEY(campaignID) REFERENCES campaigns(id)
);

CREATE TABLE conversions (
    customerID NUMBER NOT NULL,
    campaignID NUMBER NOT NULL,
    previousPurchases NUMBER NOT NULL,
    loyaltyPoints NUMBER NOT NULL,
    conversion NUMBER(1) NOT NULL, -- Only binary 0 or 1 allowed
    CONSTRAINT check_conversion_input CHECK(conversion IN (0, 1)),
    PRIMARY KEY(customerID, campaignID),
    FOREIGN KEY(customerID) REFERENCES customers(id),
    FOREIGN KEY(campaignID) REFERENCES campaigns(id)
);

INSERT INTO customers (id, age, gender, income)
SELECT DISTINCT customerID, age, gender, income
FROM cvs_staging;

INSERT INTO campaigns (id, channel, type, adSpend, clickThroughRate, conversionRate)
SELECT DISTINCT 
    ROW_NUMBER() OVER (
        -- Query_partition_clause omitted meaning whole result set is a single partition
        ORDER BY campaignChannel, campaignType
    ) id,
    campaignChannel, 
    campaignType,
    adSpend, 
    clickThroughRate,
    conversionRate
FROM cvs_staging;

-- Insert engagement data with full campaign matching
INSERT INTO engagement (customerID, campaignID, websiteVisits, pagesPerVisit, timeOnSite, socialShares, emailOpens, emailClicks)
SELECT
    s.customerID,
    c.id,
    s.websiteVisits,
    s.pagesPerVisit,
    s.timeOnSite,
    s.socialShares,
    s.emailOpens,
    s.emailClicks
FROM cvs_staging s
JOIN campaigns c 
    -- Each record in the campaigns table is a unique combination of data so this is necessary
    ON s.campaignChannel = c.channel 
    AND s.campaignType = c.type 
    AND s.adSpend = c.adSpend
    AND s.clickThroughRate = c.clickThroughRate
    AND s.conversionRate = c.conversionRate
;

-- Insert conversion data with full campaign matching
INSERT INTO conversions (customerID, campaignID, previousPurchases, loyaltyPoints, conversion)
SELECT
    s.customerID,
    c.id,
    s.previousPurchases,
    s.loyaltyPoints,
    s.conversion
FROM cvs_staging s
JOIN campaigns c 
    -- Each record in the campaigns table is a unique combination of data so this is necessary
    ON s.campaignChannel = c.channel 
    AND s.campaignType = c.type 
    AND s.adSpend = c.adSpend
    AND s.clickThroughRate = c.clickThroughRate
    AND s.conversionRate = c.conversionRate
;

-- Set of Example ALTER statements
ALTER TABLE customers
ADD (
    profession VARCHAR2(25) NOT NULL,
    location VARCHAR2(25) NOT NULL,
    email VARCHAR2(100) NOT NULL
);

ALTER TABLE customers 
MODIFY (email VARCHAR2(255));

ALTER TABLE campaigns
RENAME COLUMN clickThroughRate TO CTR;

ALTER TABLE customers
DROP CONSTRAINT check_gender_input;

ALTER TABLE customers
ADD CONSTRAINT gender_gender_input 
CHECK(gender IN ('Female', 'Male', 'Nonconforming'));